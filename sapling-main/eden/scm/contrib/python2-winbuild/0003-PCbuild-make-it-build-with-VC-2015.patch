From a897db7b5ebefc97bc413a5399e0fa28c81415ee Mon Sep 17 00:00:00 2001
From: Jun Wu <quark@fb.com>
Date: Sat, 1 Dec 2018 18:47:43 -0800
Subject: [PATCH 3/7] PCbuild: make it build with VC 2015

See https://github.com/python-cmake-buildsystem/python-cmake-buildsystem/issues/161
---
 Modules/posixmodule.c | 37 +++++--------------------------------
 Modules/timemodule.c  |  8 ++++----
 2 files changed, 9 insertions(+), 36 deletions(-)

diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index f7558eb644f..f453da55656 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -575,38 +575,11 @@ extern __declspec(dllimport) char * __pioinfo[];
 int
 _PyVerify_fd(int fd)
 {
-    const int i1 = fd >> IOINFO_L2E;
-    const int i2 = fd & ((1 << IOINFO_L2E) - 1);
-
-    static int sizeof_ioinfo = 0;
-
-    /* Determine the actual size of the ioinfo structure,
-     * as used by the CRT loaded in memory
-     */
-    if (sizeof_ioinfo == 0 && __pioinfo[0] != NULL) {
-        sizeof_ioinfo = _msize(__pioinfo[0]) / IOINFO_ARRAY_ELTS;
-    }
-    if (sizeof_ioinfo == 0) {
-        /* This should not happen... */
-        goto fail;
-    }
-
-    /* See that it isn't a special CLEAR fileno */
-    if (fd != _NO_CONSOLE_FILENO) {
-        /* Microsoft CRT would check that 0<=fd<_nhandle but we can't do that.  Instead
-         * we check pointer validity and other info
-         */
-        if (0 <= i1 && i1 < IOINFO_ARRAYS && __pioinfo[i1] != NULL) {
-            /* finally, check that the file is open */
-            my_ioinfo* info = (my_ioinfo*)(__pioinfo[i1] + i2 * sizeof_ioinfo);
-            if (info->osfile & FOPEN) {
-                return 1;
-            }
-        }
-    }
-  fail:
-    errno = EBADF;
-    return 0;
+    //a call to _get_osfhandle with invalid fd sets errno to EBADF
+    if (_get_osfhandle(fd) == INVALID_HANDLE_VALUE)
+        return 0;
+    else
+        return 1;
 }
 
 /* the special case of checking dup2.  The target fd must be in a sensible range */
diff --git a/Modules/timemodule.c b/Modules/timemodule.c
index 61b8d612a4a..ef00e99e5ef 100644
--- a/Modules/timemodule.c
+++ b/Modules/timemodule.c
@@ -808,7 +808,7 @@ inittimezone(PyObject *m) {
 #ifdef PYOS_OS2
     PyModule_AddIntConstant(m, "timezone", _timezone);
 #else /* !PYOS_OS2 */
-    PyModule_AddIntConstant(m, "timezone", timezone);
+    PyModule_AddIntConstant(m, "timezone", _timezone);
 #endif /* PYOS_OS2 */
 #ifdef HAVE_ALTZONE
     PyModule_AddIntConstant(m, "altzone", altzone);
@@ -816,12 +816,12 @@ inittimezone(PyObject *m) {
 #ifdef PYOS_OS2
     PyModule_AddIntConstant(m, "altzone", _timezone-3600);
 #else /* !PYOS_OS2 */
-    PyModule_AddIntConstant(m, "altzone", timezone-3600);
+    PyModule_AddIntConstant(m, "altzone", _timezone-3600);
 #endif /* PYOS_OS2 */
 #endif
-    PyModule_AddIntConstant(m, "daylight", daylight);
+    PyModule_AddIntConstant(m, "daylight", _daylight);
     PyModule_AddObject(m, "tzname",
-                       Py_BuildValue("(zz)", tzname[0], tzname[1]));
+                       Py_BuildValue("(zz)", _tzname[0], _tzname[1]));
 #else /* !HAVE_TZNAME || __GLIBC__ || __CYGWIN__*/
 #ifdef HAVE_STRUCT_TM_TM_ZONE
     {
-- 
2.14.1.windows.1

