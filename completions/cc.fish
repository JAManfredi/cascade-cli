# Print an optspec for argparse to handle cmd's options that are independent of any subcommand.
function __fish_cc_global_optspecs
	string join \n v/verbose no-color h/help V/version
end

function __fish_cc_needs_command
	# Figure out if the current invocation already has a command.
	set -l cmd (commandline -opc)
	set -e cmd[1]
	argparse -s (__fish_cc_global_optspecs) -- $cmd 2>/dev/null
	or return
	if set -q argv[1]
		# Also print the command, so this can be used to figure out what it is.
		echo $argv[1]
		return 1
	end
	return 0
end

function __fish_cc_using_subcommand
	set -l cmd (__fish_cc_needs_command)
	test -z "$cmd"
	and return 1
	contains -- $cmd[1] $argv
end

complete -c cc -n "__fish_cc_needs_command" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_needs_command" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_needs_command" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_needs_command" -s V -l version -d 'Print version'
complete -c cc -n "__fish_cc_needs_command" -f -a "init" -d 'Initialize repository for Cascade'
complete -c cc -n "__fish_cc_needs_command" -f -a "config" -d 'Configuration management'
complete -c cc -n "__fish_cc_needs_command" -f -a "stack" -d 'Stack management'
complete -c cc -n "__fish_cc_needs_command" -f -a "entry" -d 'Entry management and editing'
complete -c cc -n "__fish_cc_needs_command" -f -a "status" -d 'Show repository status'
complete -c cc -n "__fish_cc_needs_command" -f -a "version" -d 'Show version information'
complete -c cc -n "__fish_cc_needs_command" -f -a "doctor" -d 'Check repository health and configuration'
complete -c cc -n "__fish_cc_needs_command" -f -a "completions" -d 'Generate shell completions'
complete -c cc -n "__fish_cc_needs_command" -f -a "setup" -d 'Interactive setup wizard'
complete -c cc -n "__fish_cc_needs_command" -f -a "tui" -d 'Launch interactive TUI for stack management'
complete -c cc -n "__fish_cc_needs_command" -f -a "hooks" -d 'Git hooks management'
complete -c cc -n "__fish_cc_needs_command" -f -a "viz" -d 'Visualize stacks and dependencies'
complete -c cc -n "__fish_cc_needs_command" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand init" -l bitbucket-url -d 'Bitbucket Server URL' -r
complete -c cc -n "__fish_cc_using_subcommand init" -l force -d 'Force initialization even if already initialized'
complete -c cc -n "__fish_cc_using_subcommand init" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand init" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand init" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand config; and not __fish_seen_subcommand_from set get list unset help" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand config; and not __fish_seen_subcommand_from set get list unset help" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand config; and not __fish_seen_subcommand_from set get list unset help" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand config; and not __fish_seen_subcommand_from set get list unset help" -f -a "set" -d 'Set a configuration value'
complete -c cc -n "__fish_cc_using_subcommand config; and not __fish_seen_subcommand_from set get list unset help" -f -a "get" -d 'Get a configuration value'
complete -c cc -n "__fish_cc_using_subcommand config; and not __fish_seen_subcommand_from set get list unset help" -f -a "list" -d 'List all configuration values'
complete -c cc -n "__fish_cc_using_subcommand config; and not __fish_seen_subcommand_from set get list unset help" -f -a "unset" -d 'Remove a configuration value'
complete -c cc -n "__fish_cc_using_subcommand config; and not __fish_seen_subcommand_from set get list unset help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from set" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from set" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from set" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from get" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from get" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from get" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from list" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from list" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from unset" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from unset" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from unset" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "set" -d 'Set a configuration value'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "get" -d 'Get a configuration value'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "list" -d 'List all configuration values'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "unset" -d 'Remove a configuration value'
complete -c cc -n "__fish_cc_using_subcommand config; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "create" -d 'Create a new stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "list" -d 'List all stacks'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "switch" -d 'Switch to a different stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "show" -d 'Show detailed information about a stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "push" -d 'Push current commit to the top of the stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "pop" -d 'Pop the top commit from the stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "submit" -d 'Submit a stack entry for review'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "status" -d 'Check status of all pull requests in a stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "prs" -d 'List all pull requests for the repository'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "sync" -d 'Sync stack with remote repository'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "rebase" -d 'Rebase stack on updated base branch'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "continue-rebase" -d 'Continue an in-progress rebase after resolving conflicts'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "abort-rebase" -d 'Abort an in-progress rebase'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "rebase-status" -d 'Show rebase status and conflict resolution guidance'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "delete" -d 'Delete a stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "validate" -d 'Validate stack integrity'
complete -c cc -n "__fish_cc_using_subcommand stack; and not __fish_seen_subcommand_from create list switch show push pop submit status prs sync rebase continue-rebase abort-rebase rebase-status delete validate help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from create" -s b -l base -d 'Base branch for the stack' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from create" -s d -l description -d 'Description of the stack' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from create" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from create" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from create" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from list" -l format -d 'Output format (name, id, status)' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from list" -s v -l verbose -d 'Show detailed information'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from list" -l active -d 'Show only active stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from list" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from switch" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from switch" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from switch" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from show" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from show" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from show" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from push" -s b -l branch -d 'Branch name for this commit' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from push" -s m -l message -d 'Commit message (if creating a new commit)' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from push" -l commit -d 'Use specific commit hash instead of HEAD' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from push" -l since -d 'Push commits since this reference (e.g., HEAD~3)' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from push" -l commits -d 'Push multiple specific commits (comma-separated)' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from push" -l squash -d 'Squash last N commits into one before pushing' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from push" -l squash-since -d 'Squash all commits since this reference (e.g., HEAD~5)' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from push" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from push" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from push" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from pop" -l keep-branch -d 'Keep the branch (don\'t delete it)'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from pop" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from pop" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from pop" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from submit" -s t -l title -d 'Pull request title' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from submit" -s d -l description -d 'Pull request description' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from submit" -l range -d 'Submit range of entries (e.g., "1-3" or "2,4,6")' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from submit" -l draft -d 'Create draft pull requests (can be edited later)'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from submit" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from submit" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from submit" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from status" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from status" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from status" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from prs" -l state -d 'Filter by state (open, merged, declined)' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from prs" -s v -l verbose -d 'Show detailed information'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from prs" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from prs" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from sync" -l force -d 'Force sync even if there are conflicts'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from sync" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from sync" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from sync" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from rebase" -l onto -d 'Target base branch (defaults to stack\'s base branch)' -r
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from rebase" -l strategy -d 'Rebase strategy to use' -r -f -a "branch-versioning\t'Create new branches with version suffixes'
cherry-pick\t'Use cherry-pick to apply commits'
three-way-merge\t'Create merge commits'
interactive\t'Interactive rebase'"
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from rebase" -s i -l interactive -d 'Interactive rebase'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from rebase" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from rebase" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from rebase" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from continue-rebase" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from continue-rebase" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from continue-rebase" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from abort-rebase" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from abort-rebase" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from abort-rebase" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from rebase-status" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from rebase-status" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from rebase-status" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from delete" -l force -d 'Force deletion without confirmation'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from delete" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from delete" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from delete" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from validate" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from validate" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from validate" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "create" -d 'Create a new stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "list" -d 'List all stacks'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "switch" -d 'Switch to a different stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "show" -d 'Show detailed information about a stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "push" -d 'Push current commit to the top of the stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "pop" -d 'Pop the top commit from the stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "submit" -d 'Submit a stack entry for review'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "status" -d 'Check status of all pull requests in a stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "prs" -d 'List all pull requests for the repository'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "sync" -d 'Sync stack with remote repository'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "rebase" -d 'Rebase stack on updated base branch'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "continue-rebase" -d 'Continue an in-progress rebase after resolving conflicts'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "abort-rebase" -d 'Abort an in-progress rebase'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "rebase-status" -d 'Show rebase status and conflict resolution guidance'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "delete" -d 'Delete a stack'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "validate" -d 'Validate stack integrity'
complete -c cc -n "__fish_cc_using_subcommand stack; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand entry; and not __fish_seen_subcommand_from checkout status list help" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand entry; and not __fish_seen_subcommand_from checkout status list help" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand entry; and not __fish_seen_subcommand_from checkout status list help" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand entry; and not __fish_seen_subcommand_from checkout status list help" -f -a "checkout" -d 'Interactively checkout a stack entry for editing'
complete -c cc -n "__fish_cc_using_subcommand entry; and not __fish_seen_subcommand_from checkout status list help" -f -a "status" -d 'Show current edit mode status'
complete -c cc -n "__fish_cc_using_subcommand entry; and not __fish_seen_subcommand_from checkout status list help" -f -a "list" -d 'List all entries with their edit status'
complete -c cc -n "__fish_cc_using_subcommand entry; and not __fish_seen_subcommand_from checkout status list help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from checkout" -s e -l entry -d 'Stack entry number (optional, shows picker if not provided)' -r
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from checkout" -l direct -d 'Skip interactive picker and use entry number directly'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from checkout" -s y -l yes -d 'Skip confirmation prompts'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from checkout" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from checkout" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from checkout" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from status" -l quiet -d 'Show brief status only'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from status" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from status" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from status" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from list" -s v -l verbose -d 'Show detailed information'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from list" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from help" -f -a "checkout" -d 'Interactively checkout a stack entry for editing'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from help" -f -a "status" -d 'Show current edit mode status'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from help" -f -a "list" -d 'List all entries with their edit status'
complete -c cc -n "__fish_cc_using_subcommand entry; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand status" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand status" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand status" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand version" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand version" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand version" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand doctor" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand doctor" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand doctor" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand completions; and not __fish_seen_subcommand_from generate install status help" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand completions; and not __fish_seen_subcommand_from generate install status help" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand completions; and not __fish_seen_subcommand_from generate install status help" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand completions; and not __fish_seen_subcommand_from generate install status help" -f -a "generate" -d 'Generate completions for a shell'
complete -c cc -n "__fish_cc_using_subcommand completions; and not __fish_seen_subcommand_from generate install status help" -f -a "install" -d 'Install completions for available shells'
complete -c cc -n "__fish_cc_using_subcommand completions; and not __fish_seen_subcommand_from generate install status help" -f -a "status" -d 'Show completion installation status'
complete -c cc -n "__fish_cc_using_subcommand completions; and not __fish_seen_subcommand_from generate install status help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from generate" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from generate" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from generate" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from install" -l shell -d 'Specific shell to install for' -r -f -a "bash\t''
elvish\t''
fish\t''
powershell\t''
zsh\t''"
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from install" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from install" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from install" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from status" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from status" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from status" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from help" -f -a "generate" -d 'Generate completions for a shell'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from help" -f -a "install" -d 'Install completions for available shells'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from help" -f -a "status" -d 'Show completion installation status'
complete -c cc -n "__fish_cc_using_subcommand completions; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand setup" -l force -d 'Force reconfiguration if already initialized'
complete -c cc -n "__fish_cc_using_subcommand setup" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand setup" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand setup" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand tui" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand tui" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand tui" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand hooks; and not __fish_seen_subcommand_from install uninstall status add remove help" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand hooks; and not __fish_seen_subcommand_from install uninstall status add remove help" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand hooks; and not __fish_seen_subcommand_from install uninstall status add remove help" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand hooks; and not __fish_seen_subcommand_from install uninstall status add remove help" -f -a "install" -d 'Install all Cascade Git hooks'
complete -c cc -n "__fish_cc_using_subcommand hooks; and not __fish_seen_subcommand_from install uninstall status add remove help" -f -a "uninstall" -d 'Uninstall all Cascade Git hooks'
complete -c cc -n "__fish_cc_using_subcommand hooks; and not __fish_seen_subcommand_from install uninstall status add remove help" -f -a "status" -d 'Show Git hooks status'
complete -c cc -n "__fish_cc_using_subcommand hooks; and not __fish_seen_subcommand_from install uninstall status add remove help" -f -a "add" -d 'Install a specific hook'
complete -c cc -n "__fish_cc_using_subcommand hooks; and not __fish_seen_subcommand_from install uninstall status add remove help" -f -a "remove" -d 'Remove a specific hook'
complete -c cc -n "__fish_cc_using_subcommand hooks; and not __fish_seen_subcommand_from install uninstall status add remove help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from install" -l skip-checks -d 'Skip prerequisite checks (repository type, configuration validation)'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from install" -l allow-main-branch -d 'Allow installation on main/master branches (not recommended)'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from install" -s y -l yes -d 'Skip confirmation prompt'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from install" -l force -d 'Force installation even if checks fail (not recommended)'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from install" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from install" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from install" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from uninstall" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from uninstall" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from uninstall" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from status" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from status" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from status" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from add" -l skip-checks -d 'Skip prerequisite checks'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from add" -l force -d 'Force installation even if checks fail'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from add" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from add" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from add" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from remove" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from remove" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from remove" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from help" -f -a "install" -d 'Install all Cascade Git hooks'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from help" -f -a "uninstall" -d 'Uninstall all Cascade Git hooks'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from help" -f -a "status" -d 'Show Git hooks status'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from help" -f -a "add" -d 'Install a specific hook'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from help" -f -a "remove" -d 'Remove a specific hook'
complete -c cc -n "__fish_cc_using_subcommand hooks; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand viz; and not __fish_seen_subcommand_from stack deps help" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand viz; and not __fish_seen_subcommand_from stack deps help" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand viz; and not __fish_seen_subcommand_from stack deps help" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand viz; and not __fish_seen_subcommand_from stack deps help" -f -a "stack" -d 'Show stack diagram'
complete -c cc -n "__fish_cc_using_subcommand viz; and not __fish_seen_subcommand_from stack deps help" -f -a "deps" -d 'Show dependency graph of all stacks'
complete -c cc -n "__fish_cc_using_subcommand viz; and not __fish_seen_subcommand_from stack deps help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from stack" -s f -l format -d 'Output format (ascii, mermaid, dot, plantuml)' -r
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from stack" -s o -l output -d 'Output file path' -r
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from stack" -l compact -d 'Compact mode (less details)'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from stack" -l no-colors -d 'Disable colors'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from stack" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from stack" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from stack" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from deps" -s f -l format -d 'Output format (ascii, mermaid, dot, plantuml)' -r
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from deps" -s o -l output -d 'Output file path' -r
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from deps" -l compact -d 'Compact mode (less details)'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from deps" -l no-colors -d 'Disable colors'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from deps" -s v -l verbose -d 'Enable verbose logging'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from deps" -l no-color -d 'Disable colored output'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from deps" -s h -l help -d 'Print help'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from help" -f -a "stack" -d 'Show stack diagram'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from help" -f -a "deps" -d 'Show dependency graph of all stacks'
complete -c cc -n "__fish_cc_using_subcommand viz; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "init" -d 'Initialize repository for Cascade'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "config" -d 'Configuration management'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "stack" -d 'Stack management'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "entry" -d 'Entry management and editing'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "status" -d 'Show repository status'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "version" -d 'Show version information'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "doctor" -d 'Check repository health and configuration'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "completions" -d 'Generate shell completions'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "setup" -d 'Interactive setup wizard'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "tui" -d 'Launch interactive TUI for stack management'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "hooks" -d 'Git hooks management'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "viz" -d 'Visualize stacks and dependencies'
complete -c cc -n "__fish_cc_using_subcommand help; and not __fish_seen_subcommand_from init config stack entry status version doctor completions setup tui hooks viz help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "set" -d 'Set a configuration value'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "get" -d 'Get a configuration value'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "list" -d 'List all configuration values'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from config" -f -a "unset" -d 'Remove a configuration value'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "create" -d 'Create a new stack'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "list" -d 'List all stacks'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "switch" -d 'Switch to a different stack'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "show" -d 'Show detailed information about a stack'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "push" -d 'Push current commit to the top of the stack'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "pop" -d 'Pop the top commit from the stack'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "submit" -d 'Submit a stack entry for review'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "status" -d 'Check status of all pull requests in a stack'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "prs" -d 'List all pull requests for the repository'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "sync" -d 'Sync stack with remote repository'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "rebase" -d 'Rebase stack on updated base branch'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "continue-rebase" -d 'Continue an in-progress rebase after resolving conflicts'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "abort-rebase" -d 'Abort an in-progress rebase'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "rebase-status" -d 'Show rebase status and conflict resolution guidance'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "delete" -d 'Delete a stack'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from stack" -f -a "validate" -d 'Validate stack integrity'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from entry" -f -a "checkout" -d 'Interactively checkout a stack entry for editing'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from entry" -f -a "status" -d 'Show current edit mode status'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from entry" -f -a "list" -d 'List all entries with their edit status'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from completions" -f -a "generate" -d 'Generate completions for a shell'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from completions" -f -a "install" -d 'Install completions for available shells'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from completions" -f -a "status" -d 'Show completion installation status'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from hooks" -f -a "install" -d 'Install all Cascade Git hooks'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from hooks" -f -a "uninstall" -d 'Uninstall all Cascade Git hooks'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from hooks" -f -a "status" -d 'Show Git hooks status'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from hooks" -f -a "add" -d 'Install a specific hook'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from hooks" -f -a "remove" -d 'Remove a specific hook'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from viz" -f -a "stack" -d 'Show stack diagram'
complete -c cc -n "__fish_cc_using_subcommand help; and __fish_seen_subcommand_from viz" -f -a "deps" -d 'Show dependency graph of all stacks'
