name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      test_release:
        description: 'Test release (skip some steps)'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  generate-completions:
    name: Generate Shell Completions
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build binary for completion generation
      run: cargo build --release

    - name: Generate shell completions
      run: |
        mkdir -p completions
        ./target/release/ca completions generate bash > completions/ca.bash
        ./target/release/ca completions generate zsh > completions/_ca
        ./target/release/ca completions generate fish > completions/ca.fish
        ./target/release/ca completions generate powershell > completions/ca.ps1
        
        echo "Generated completions:"
        ls -la completions/

    - name: Upload completions
      uses: actions/upload-artifact@v4
      with:
        name: completions
        path: completions/

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: generate-completions
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: ca-linux-x64
            can-test: true
          - target: aarch64-unknown-linux-gnu  
            os: ubuntu-latest
            name: ca-linux-arm64
            can-test: false
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            name: ca-macos-x64
            can-test: true
          - target: aarch64-apple-darwin
            os: macos-latest  
            name: ca-macos-arm64
            can-test: false
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: ca-windows-x64.exe
            can-test: true
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: ca-windows-arm64.exe
            can-test: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Configure cross-compilation (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Download completions
      uses: actions/download-artifact@v4
      with:
        name: completions
        path: completions


    - name: Run tests (if supported)
      if: matrix.can-test
      continue-on-error: true
      run: cargo test --target ${{ matrix.target }}

    - name: Create binary package (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        # Create package directory
        mkdir -p package
        cp target/${{ matrix.target }}/release/ca package/
        
        # Include completions
        cp -r completions package/
        
        # Create archive
        cd package
        tar czf ../${{ matrix.name }}.tar.gz *
        cd ..

    - name: Create binary package (Windows)  
      if: matrix.os == 'windows-latest'
      run: |
        # Create package directory
        mkdir package
        cp target/${{ matrix.target }}/release/ca.exe package/
        
        # Include completions
        Copy-Item -Recurse completions package/
        
        # Create archive
        cd package
        7z a ../${{ matrix.name }}.zip *
        cd ..

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: |
          ${{ matrix.name }}.tar.gz
          ${{ matrix.name }}.zip

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate release notes
      id: release_notes
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi
        
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        
        # Get previous tag for changelog
        PREV_TAG=$(git describe --tags --abbrev=0 $TAG^ 2>/dev/null || echo "")
        
        # Generate changelog
        echo "## 🚀 What's New in $TAG" > release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "### 📝 Changes since $PREV_TAG:" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..$TAG >> release_notes.md
        else
          echo "### 📝 Initial Release Features:" >> release_notes.md
          echo "- 🔄 **Stacked Diff Workflow** - Chain related commits for better code review" >> release_notes.md
          echo "- 🤖 **Smart Conflict Resolution** - Auto-resolves 60-80% of common rebase conflicts" >> release_notes.md
          echo "- 🚀 **Smart Force Push** - Preserves review history during rebases" >> release_notes.md
          echo "- 🔧 **Bitbucket Integration** - Seamless PR management" >> release_notes.md
          echo "- 📊 **Terminal UI** - Interactive stack browser and management" >> release_notes.md
          echo "- 🎨 **Visualizations** - ASCII, Mermaid, Graphviz, PlantUML formats" >> release_notes.md
          echo "- ⚡ **Git Hooks** - Automated workflow enforcement" >> release_notes.md
          echo "- 🛠️ **Shell Completions** - Bash, Zsh, Fish, PowerShell support" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## 📦 Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Quick Install (Unix)" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "# Linux (x64)" >> release_notes.md
        echo "curl -L https://github.com/JAManfredi/cascade-cli/releases/download/$TAG/ca-linux-x64.tar.gz | tar -xz" >> release_notes.md
        echo "sudo mv ca /usr/local/bin/" >> release_notes.md
        echo "" >> release_notes.md
        echo "# macOS (x64)" >> release_notes.md
        echo "curl -L https://github.com/JAManfredi/cascade-cli/releases/download/$TAG/ca-macos-x64.tar.gz | tar -xz" >> release_notes.md
        echo "sudo mv ca /usr/local/bin/" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "### Platform-Specific Downloads" >> release_notes.md
        echo "- **Linux x64**: ca-linux-x64.tar.gz" >> release_notes.md
        echo "- **Linux ARM64**: ca-linux-arm64.tar.gz" >> release_notes.md
        echo "- **macOS x64**: ca-macos-x64.tar.gz" >> release_notes.md
        echo "- **macOS ARM64**: ca-macos-arm64.tar.gz" >> release_notes.md
        echo "- **Windows x64**: ca-windows-x64.exe.zip" >> release_notes.md
        echo "- **Windows ARM64**: ca-windows-arm64.exe.zip" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 📖 Documentation" >> release_notes.md
        echo "- [User Manual](https://github.com/JAManfredi/cascade-cli/blob/main/docs/USER_MANUAL.md)" >> release_notes.md
        echo "- [Installation Guide](https://github.com/JAManfredi/cascade-cli/blob/main/docs/INSTALLATION.md)" >> release_notes.md
        echo "- [30-Minute Onboarding](https://github.com/JAManfredi/cascade-cli/blob/main/docs/ONBOARDING.md)" >> release_notes.md

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
        find artifacts -name "*.zip" -exec cp {} release-assets/ \;
        ls -la release-assets/

    # Test downloaded releases
    - name: Test Unix releases
      run: |
        cd release-assets
        # Only test the Linux x64 binary on Linux runners
        if [ -f "ca-linux-x64.tar.gz" ]; then
          tar -xzf "ca-linux-x64.tar.gz"
          ./ca --version
          ./ca --help
          rm -f ca  # Clean up
        fi

    # Test Windows releases separately  
    - name: Test Windows releases
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        cd release-assets
        if ("${{ github.event_name }}" -eq "workflow_dispatch") { 
          $TAG = "${{ github.event.inputs.tag }}"
        } else {
          $TAG = "${env:GITHUB_REF}".Substring(10)  # Remove 'refs/tags/'
        }
        
        $target = "ca-windows-x64.exe.zip"
        if (Test-Path $target) {
          Expand-Archive -Path $target -DestinationPath "."
          .\ca.exe --version
          .\ca.exe --help
        }

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.release_notes.outputs.tag }}
        name: 'Cascade CLI ${{ steps.release_notes.outputs.tag }}'
        body_path: release_notes.md
        files: release-assets/*
        draft: false
        prerelease: false
        make_latest: true

  update-homebrew:
    name: Update Homebrew Formula  
    needs: create-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && !github.event.inputs.test_release
    
    steps:
    - name: Checkout main repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get release info
      id: release_info
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Download release assets for checksums
      run: |
        TAG=${{ steps.release_info.outputs.tag }}
        curl -L -o ca-macos-arm64.tar.gz "https://github.com/JAManfredi/cascade-cli/releases/download/$TAG/ca-macos-arm64.tar.gz"
        curl -L -o ca-macos-x64.tar.gz "https://github.com/JAManfredi/cascade-cli/releases/download/$TAG/ca-macos-x64.tar.gz"
        
        # Calculate checksums
        ARM64_SHA=$(sha256sum ca-macos-arm64.tar.gz | cut -d' ' -f1)
        X64_SHA=$(sha256sum ca-macos-x64.tar.gz | cut -d' ' -f1)
        
        echo "ARM64_SHA=$ARM64_SHA" >> $GITHUB_ENV
        echo "X64_SHA=$X64_SHA" >> $GITHUB_ENV

    - name: Update Homebrew formula
      run: |
        TAG=${{ steps.release_info.outputs.tag }}
        # Update URLs and checksums
        sed -i "s|https://github.com/JAManfredi/cascade-cli/releases/download/v[^/]*/ca-macos-arm64.tar.gz|https://github.com/JAManfredi/cascade-cli/releases/download/$TAG/ca-macos-arm64.tar.gz|g" homebrew/cascade-cli.rb
        sed -i "s|https://github.com/JAManfredi/cascade-cli/releases/download/v[^/]*/ca-macos-x64.tar.gz|https://github.com/JAManfredi/cascade-cli/releases/download/$TAG/ca-macos-x64.tar.gz|g" homebrew/cascade-cli.rb
        
        # Update version
        sed -i "s/version \"v[^\"]*\"/version \"$TAG\"/g" homebrew/cascade-cli.rb
        
        # Update checksums
        sed -i "s/sha256 \"[a-f0-9]*\" # ARM64/sha256 \"$ARM64_SHA\" # ARM64/g" homebrew/cascade-cli.rb
        sed -i "s/sha256 \"[a-f0-9]*\" # x64/sha256 \"$X64_SHA\" # x64/g" homebrew/cascade-cli.rb

    - name: Commit and push updated formula
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add homebrew/cascade-cli.rb
        git commit -m "Update Homebrew formula to ${{ steps.release_info.outputs.tag }}" || exit 0
        git push